imports:
    - { resource: parameters.php }
    - { resource: security.yml }
    - { resource: mysql_extensions.yml }

parameters:
    locale: en
    object_storage_tmp: "%kernel.root_dir%/../var/tmp"

swiftmailer:
    transport: "smtp"
    host:      "%env(EMAIL_HOST)%"
    port:      "%env(EMAIL_PORT)%"
    username:  "%env(EMAIL_USER)%"
    password:  "%env(EMAIL_PASS)%"
    spool:
        type: memory

monolog:
    handlers:
        console:
            type: console

twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%env(MYSQL_HOST)%"
        port:     "%env(MYSQL_PORT)%"
        dbname:   "%env(MYSQL_DATABASE)%"
        user:     "%env(MYSQL_USER)%"
        password: "%env(MYSQL_PASSWORD)%"
        charset:  UTF8

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
            StofDoctrineExtensionsBundle: ~

framework:
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

stof_doctrine_extensions:
    default_locale: en_GB
    orm:
        default:
            tree: true

oneup_flysystem:
    adapters:
        ephemeral:
            local:
                directory: "%object_storage_tmp%/ephemeral"

        coasters:
            awss3v3:
                client: flysystem.s3_client
                bucket: "%env(OBJECT_STORAGE_BUCKET)%"
                prefix: "private/files"

        screenshots:
            awss3v3:
                client: flysystem.s3_client
                bucket: "%env(OBJECT_STORAGE_BUCKET)%"
                prefix: "images"

    filesystems:
        ephemeral:
            adapter: ephemeral
            mount: ephemeral

        coasters:
            adapter: coasters
            mount: coasters

        screenshots:
            adapter: screenshots
            mount: screenshots

services:

    handler.coaster.upload.started:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Handlers\Coaster\UploadStartedHandler
        arguments:
            - "@=service('doctrine').getRepository('AppBundle:File')"
            - "@event_dispatcher"

    handler.coaster.upload.finished:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Handlers\Coaster\UploadFinishedHandler
        arguments:
            - "@upload_coaster_service"
            - "@upload_screenshot_service"
            - "@event_dispatcher"

    listener.coaster.upload.started.detect_style:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\EventListeners\Coaster\Upload\Started\DetectStyleListener
        arguments:
            - "@=service('doctrine').getRepository('AppBundle:File')"
            - "@=service('doctrine').getRepository('AppBundle:NolimitsCoasterStyle')"
            - "@style_detector"
        tags:
            - { name: kernel.event_listener, event: coaster.upload.started, priority: 255 }

    listener.coaster.upload.started.move_to_ephemeral:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\EventListeners\Coaster\Upload\Started\MoveToEphemeralListener
        arguments:
            - "@app.file_uploader"
        tags:
            - { name: kernel.event_listener, event: coaster.upload.started, priority: 200 }

    listener.coaster.upload.finished.mark_as_published:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\EventListeners\Coaster\Upload\Finished\MarkAsPublishedListener
        arguments:
            - "@=service('doctrine').getRepository('AppBundle:File')"
        tags:
            - { name: kernel.event_listener, event: coaster.upload.finished }

    style_detector:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Coaster\StyleDetector
        arguments:
            - ["@style_detector.version_2"]

    style_detector.version_2:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Coaster\StyleDetector\Nolimits2Detector
        public: false

    coaster_styles:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\CoasterStyles

    util.string:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Utils\StringUtil

    util.coaster:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Utils\CoasterUtil
        arguments:
            - "@util.string"

    util.screenshot:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Utils\ScreenshotUtil
        arguments:
            - "@util.string"

    upload_screenshot_service:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Services\UploadScreenshotService
        arguments:
            - "@util.screenshot"
            - "@intervention"
        calls:
            - [setLogger, ["@logger"]]
            - [setMountManager, ["@oneup_flysystem.mount_manager"]]


    upload_coaster_service:
        class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Services\UploadCoasterService
        arguments:
            - "@util.coaster"
        calls:
            - [setLogger, ["@logger"]]
            - [setMountManager, ["@oneup_flysystem.mount_manager"]]

    intervention:
        class: Intervention\Image\ImageManager
        arguments:
            -
                driver: "imagick"

fos_user:
    db_driver: orm
    firewall_name: main
    user_class: Thepixeldeveloper\Nolimitsexchange\AppBundle\Entity\Users
    from_email:
        address:     no-reply@nolimits-exchange.com
        sender_name: Nolimits Exchange
    registration:
        confirmation:
            enabled: true
