<?php

namespace Thepixeldeveloper\Nolimitsexchange\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Thepixeldeveloper\Nolimitsexchange\AppBundle\Entity\File;
use Thepixeldeveloper\Nolimitsexchange\AppBundle\Form\Search;

/**
 * SearchRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class SearchRepository extends EntityRepository
{
    /**
     * @param Search $search
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function search(Search $search = null)
    {
        $query = $this
            ->createQueryBuilder('s')
            ->select()
            ->where('s.status IN (:status)')
            ->setParameter('status', [File::PUBLISHED]);

        if ($term = $search->getTerm()) {
            $query
                ->orderBy('MATCH_AGAINST(s.name) AGAINST (:term)', 'DESC')
                ->setParameter('term', $term);
        }

        if ($downloadsSort = $search->getDownloadsSort()) {
            $query->addOrderBy('s.downloads', $downloadsSort);
        } elseif ($ratingsSort = $search->getRatingsSort()) {
            $query->addOrderBy('s.rating', $ratingsSort);
        } else {
            $query->addOrderBy('s.id', 'DESC');
        }

        if ($style = $search->getType()) {
            $query
                ->andWhere('s.styleId = :style')
                ->setParameter('style', $style);
        }

        if ($downloadsFrom = $search->getDownloadsFrom()) {
            $query
                ->andWhere('s.downloads >= :downloadsFrom')
                ->setParameter('downloadsFrom', $downloadsFrom);
        }

        if ($downloadsTo = $search->getDownloadsTo()) {
            $query
                ->andWhere('s.downloads <= :downloadsTo')
                ->setParameter('downloadsTo', $downloadsTo);
        }

        if ($ratingsFrom = $search->getRatingsFrom()) {
            $query
                ->andWhere('s.rating >= :ratingsFrom')
                ->setParameter('ratingsFrom', $ratingsFrom);
        }

        if ($ratingsTo = $search->getRatingsTo()) {
            $query
                ->andWhere('s.rating <= :ratingsTo')
                ->setParameter('ratingsTo', $ratingsTo);
        }

        return $query;
    }
}
